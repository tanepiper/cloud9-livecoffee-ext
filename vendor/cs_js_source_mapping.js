// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, exports, module) {
    var get_line_matcher, is_comment_line;
    get_line_matcher = function(line) {
      var catch_var, expr, lhs, matches, op, s, str, _i, _len, _ref;
      line = line.split('# ')[0].trim();
      if (line === '') {
        return null;
      }
      if (line.match(/^if \S+$/)) {
        expr = line.slice(3).replace(/@/g, 'this.');
        return function(line) {
          return line.trim().indexOf("if \(" + expr + "\)") === 0;
        };
      }
      if (line.match(/^do .*->$/)) {
        return function(line) {
          return line.match(/\(function\(.*\) {/);
        };
      }
      if (line.indexOf(" = require") > 0) {
        matches = line.match(/["'].*?["']/g);
        if (matches) {
          s = matches[0];
          return function(line) {
            return line.indexOf("= require(" + s + ")") > 0;
          };
        }
      }
      matches = line.match(/^class ([@A-Za-z0-9_\.\[\]]+)/g);
      if (matches) {
        s = matches[0];
        s = s.replace("class ", "");
        return function(line) {
          return ~line.indexOf(s + " =");
        };
      }
      matches = line.match(/^([\$@A-Za-z0-9_\.\[\]]+)\s+(=|\+=)/g);
      if (matches) {
        _ref = matches[0].split(/\s+/), lhs = _ref[0], op = _ref[1];
        if (lhs.length > 2) {
          lhs = lhs.replace('@', '.');
          return function(line) {
            return ~line.indexOf(lhs + " " + op);
          };
        }
      }
      matches = line.match(/^@?([A-Za-z0-9_]+\s*: )/g);
      if (matches && matches.indexOf('{') === -1) {
        lhs = matches[0].replace('@', '');
        lhs = lhs.trim();
        lhs = lhs.slice(0, lhs.length - 1).trim();
        if (lhs === 'constructor' || lhs === 'class') {
          return null;
        }
        return function(line) {
          return line.trim().indexOf(lhs + ':') === 0 || line.trim().indexOf(lhs + ' =') > 0;
        };
      }
      matches = line.match(/\(\S+, .*?\) ->/g);
      if (matches) {
        s = matches[0];
        s = s.replace("->", "{");
        return function(line) {
          return line.indexOf(s) > 0;
        };
      }
      matches = line.match(/"[^"]+?"|'[^']+?'|\/[^\/]+?\//g);
      if (matches) {
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          str = matches[_i];
          if (str.length >= 5) {
            return function(line) {
              return line.indexOf(str) >= 0;
            };
          }
        }
      }
      if (line.match(/^try$/)) {
        return function(line) {
          return line.trim() === 'try {';
        };
      }
      if (line.match(/^catch /g)) {
        catch_var = line.split(' ')[1];
        return function(line) {
          return line.trim().indexOf("} catch (" + catch_var + ") {") === 0;
        };
      }
      return null;
    };
    is_comment_line = function(line) {
      line = line.trim();
      return line === '' || line[0] === '#';
    };
    return exports.source_line_mappings = function(coffee_lines, js_lines) {
      var create_match_for_prior_comment_lines, cs_line, curr_cs_line, curr_js_line, find_js_match, js_line, line, line_matcher, matches, _i, _len;
      curr_cs_line = 0;
      curr_js_line = 0;
      matches = [];
      find_js_match = function(line_matcher) {
        var k, _i, _ref;
        for (k = _i = curr_js_line, _ref = js_lines.length; curr_js_line <= _ref ? _i < _ref : _i > _ref; k = curr_js_line <= _ref ? ++_i : --_i) {
          if (line_matcher(js_lines[k])) {
            return k;
          }
        }
        return null;
      };
      create_match_for_prior_comment_lines = function(cs_line, js_line) {
        var first_comment_line;
        first_comment_line = cs_line;
        while (curr_cs_line <= first_comment_line - 1 && is_comment_line(coffee_lines[first_comment_line - 1])) {
          first_comment_line -= 1;
        }
        if (first_comment_line < cs_line) {
          return matches.push([first_comment_line, js_line]);
        }
      };
      for (cs_line = _i = 0, _len = coffee_lines.length; _i < _len; cs_line = ++_i) {
        line = coffee_lines[cs_line];
        line_matcher = get_line_matcher(line);
        if (line_matcher) {
          js_line = find_js_match(line_matcher);
          if ((js_line != null) && curr_js_line < js_line) {
            create_match_for_prior_comment_lines(cs_line, js_line);
            matches.push([cs_line, js_line]);
            curr_cs_line = cs_line;
            curr_js_line = js_line;
          }
        }
      }
      matches.push([coffee_lines.length, js_lines.length]);
      return matches;
    };
  });

}).call(this);
